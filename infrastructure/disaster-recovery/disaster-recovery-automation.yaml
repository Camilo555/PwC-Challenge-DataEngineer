# BMAD Platform Disaster Recovery Automation
# <1 hour RTO, Multi-Cloud Failover, 99.99% Availability

---
# Disaster Recovery Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: disaster-recovery
  labels:
    name: disaster-recovery
    component: business-continuity

---
# DR Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: dr-config
  namespace: disaster-recovery
  labels:
    component: dr-configuration
data:
  dr-config.yaml: |
    # Disaster Recovery Configuration
    disaster_recovery:
      enabled: true
      rto_target: 3600      # 1 hour Recovery Time Objective
      rpo_target: 900       # 15 minutes Recovery Point Objective
      availability_target: 99.99  # 99.99% availability
      
      # Multi-Cloud Strategy
      clouds:
        primary:
          provider: "aws"
          region: "us-west-2"
          cluster: "bmad-primary-cluster"
          status: "active"
          
        secondary:
          provider: "azure"
          region: "westus2"
          cluster: "bmad-secondary-cluster"
          status: "standby"
          
        tertiary:
          provider: "gcp"
          region: "us-west1"
          cluster: "bmad-tertiary-cluster"
          status: "backup"
      
      # Failover Triggers
      triggers:
        health_check_failures:
          enabled: true
          threshold: 5  # consecutive failures
          window: "5m"
          
        response_time_degradation:
          enabled: true
          threshold: "10s"  # 10 second response time
          window: "10m"
          
        availability_threshold:
          enabled: true
          threshold: 0.95  # 95% availability
          window: "15m"
          
        manual_trigger:
          enabled: true
          authorized_users: ["ops-team", "platform-admin"]
      
      # Data Replication
      data_replication:
        postgres:
          enabled: true
          mode: "synchronous"
          replicas:
            - host: "postgres-replica-azure.database.svc"
            - host: "postgres-replica-gcp.database.svc"
          backup_frequency: "15m"
          
        redis:
          enabled: true
          mode: "master-slave"
          replicas:
            - host: "redis-replica-azure.database.svc"
            - host: "redis-replica-gcp.database.svc"
          backup_frequency: "5m"
          
        elasticsearch:
          enabled: true
          mode: "cross-cluster-replication"
          replicas:
            - cluster: "es-azure-cluster"
            - cluster: "es-gcp-cluster"
          backup_frequency: "1h"
      
      # Application Recovery
      applications:
        bmad_api:
          priority: "critical"
          recovery_order: 1
          health_check: "/health"
          scaling:
            min_replicas: 3
            max_replicas: 50
            
        bmad_mobile:
          priority: "critical"
          recovery_order: 2
          health_check: "/health"
          story: "4.1"
          scaling:
            min_replicas: 2
            max_replicas: 25
            
        bmad_vector_db:
          priority: "critical"
          recovery_order: 3
          health_check: "/health"
          story: "4.2"
          scaling:
            min_replicas: 3
            max_replicas: 20
            
        bmad_analytics:
          priority: "high"
          recovery_order: 4
          health_check: "/health"
          scaling:
            min_replicas: 2
            max_replicas: 30

---
# DR Orchestrator Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dr-orchestrator
  namespace: disaster-recovery
  labels:
    app: dr-orchestrator
    component: recovery-automation
spec:
  replicas: 2
  selector:
    matchLabels:
      app: dr-orchestrator
  template:
    metadata:
      labels:
        app: dr-orchestrator
    spec:
      serviceAccountName: dr-orchestrator
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - dr-orchestrator
            topologyKey: kubernetes.io/hostname
      containers:
      - name: orchestrator
        image: bmad/dr-orchestrator:v1.0.0
        args:
        - --config-file=/etc/config/dr-config.yaml
        - --monitoring-interval=30s
        - --prometheus-url=http://prometheus.monitoring.svc.cluster.local:9090
        - --alert-manager-url=http://alertmanager.monitoring.svc.cluster.local:9093
        - --log-level=info
        env:
        - name: CURRENT_CLOUD
          value: "aws"
        - name: CURRENT_REGION
          value: "us-west-2"
        - name: DR_MODE
          value: "active"
        - name: SLACK_WEBHOOK
          valueFrom:
            secretKeyRef:
              name: dr-notifications
              key: slack-webhook
        - name: PAGERDUTY_KEY
          valueFrom:
            secretKeyRef:
              name: dr-notifications
              key: pagerduty-key
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 8090
          name: metrics
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
        resources:
          requests:
            memory: 512Mi
            cpu: 500m
          limits:
            memory: 2Gi
            cpu: 2000m
        volumeMounts:
        - name: config
          mountPath: /etc/config
        - name: kubeconfig
          mountPath: /etc/kubeconfig
      volumes:
      - name: config
        configMap:
          name: dr-config
      - name: kubeconfig
        secret:
          secretName: multi-cloud-kubeconfig

---
# Multi-Cloud Backup Manager
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backup-manager
  namespace: disaster-recovery
  labels:
    app: backup-manager
    component: data-backup
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backup-manager
  template:
    metadata:
      labels:
        app: backup-manager
    spec:
      serviceAccountName: backup-manager
      containers:
      - name: backup-manager
        image: bmad/backup-manager:v1.0.0
        args:
        - --backup-interval=15m
        - --retention-days=90
        - --cross-cloud-replication=true
        - --encryption-enabled=true
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: aws-backup-credentials
              key: access-key-id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: aws-backup-credentials
              key: secret-access-key
        - name: AZURE_STORAGE_ACCOUNT
          valueFrom:
            secretKeyRef:
              name: azure-backup-credentials
              key: storage-account
        - name: AZURE_STORAGE_KEY
          valueFrom:
            secretKeyRef:
              name: azure-backup-credentials
              key: storage-key
        - name: GCP_SERVICE_ACCOUNT
          valueFrom:
            secretKeyRef:
              name: gcp-backup-credentials
              key: service-account
        ports:
        - containerPort: 8080
          name: http
        resources:
          requests:
            memory: 1Gi
            cpu: 500m
          limits:
            memory: 4Gi
            cpu: 2000m
        volumeMounts:
        - name: backup-storage
          mountPath: /backup
      volumes:
      - name: backup-storage
        persistentVolumeClaim:
          claimName: backup-storage-pvc

---
# DR Testing CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: dr-test
  namespace: disaster-recovery
  labels:
    component: dr-testing
spec:
  schedule: "0 2 * * 6"  # Weekly on Saturday at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          serviceAccountName: dr-tester
          containers:
          - name: dr-tester
            image: bmad/dr-tester:v1.0.0
            command:
            - /bin/sh
            - -c
            - |
              echo "Starting DR test..."
              
              # Test failover to secondary cloud
              echo "Testing failover to Azure (secondary)..."
              
              # Validate data consistency
              echo "Validating data consistency..."
              
              # Test application recovery
              echo "Testing application recovery..."
              
              # Verify RTO/RPO targets
              echo "Verifying RTO/RPO targets..."
              
              # Test rollback procedures
              echo "Testing rollback procedures..."
              
              echo "DR test completed successfully"
            env:
            - name: TEST_MODE
              value: "simulation"
            - name: NOTIFICATION_ENABLED
              value: "true"
            resources:
              requests:
                memory: 512Mi
                cpu: 500m
              limits:
                memory: 2Gi
                cpu: 1000m

---
# Cross-Cloud Network Bridge
apiVersion: apps/v1
kind: Deployment
metadata:
  name: network-bridge
  namespace: disaster-recovery
  labels:
    app: network-bridge
    component: network-failover
spec:
  replicas: 2
  selector:
    matchLabels:
      app: network-bridge
  template:
    metadata:
      labels:
        app: network-bridge
    spec:
      hostNetwork: true
      containers:
      - name: network-bridge
        image: bmad/network-bridge:v1.0.0
        securityContext:
          capabilities:
            add: ["NET_ADMIN", "NET_RAW"]
          privileged: true
        args:
        - --primary-gateway=10.0.1.1
        - --secondary-gateway=10.1.1.1
        - --tertiary-gateway=10.2.1.1
        - --failover-threshold=5s
        env:
        - name: BRIDGE_MODE
          value: "active-standby"
        resources:
          requests:
            memory: 256Mi
            cpu: 200m
          limits:
            memory: 1Gi
            cpu: 1000m
        volumeMounts:
        - name: network-config
          mountPath: /etc/network
      volumes:
      - name: network-config
        configMap:
          name: network-bridge-config

---
# Service Accounts and RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dr-orchestrator
  namespace: disaster-recovery
  labels:
    component: recovery-automation

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backup-manager
  namespace: disaster-recovery
  labels:
    component: data-backup

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dr-tester
  namespace: disaster-recovery
  labels:
    component: dr-testing

---
# ClusterRole for DR Orchestrator
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dr-orchestrator
  labels:
    component: recovery-automation
rules:
- apiGroups: [""]
  resources: ["services", "endpoints", "pods", "nodes", "namespaces"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "statefulsets", "daemonsets", "replicasets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete", "scale"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses", "networkpolicies"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]

---
# ClusterRoleBinding for DR Orchestrator
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: dr-orchestrator
  labels:
    component: recovery-automation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dr-orchestrator
subjects:
- kind: ServiceAccount
  name: dr-orchestrator
  namespace: disaster-recovery

---
# DR Services
apiVersion: v1
kind: Service
metadata:
  name: dr-orchestrator
  namespace: disaster-recovery
  labels:
    app: dr-orchestrator
spec:
  selector:
    app: dr-orchestrator
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  - name: metrics
    port: 8090
    targetPort: 8090
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: backup-manager
  namespace: disaster-recovery
  labels:
    app: backup-manager
spec:
  selector:
    app: backup-manager
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  type: ClusterIP

---
# ServiceMonitors for Monitoring
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: dr-orchestrator
  namespace: disaster-recovery
  labels:
    app: dr-orchestrator
spec:
  selector:
    matchLabels:
      app: dr-orchestrator
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: backup-manager
  namespace: disaster-recovery
  labels:
    app: backup-manager
spec:
  selector:
    matchLabels:
      app: backup-manager
  endpoints:
  - port: http
    interval: 60s
    path: /metrics

---
# DR Alerts for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: disaster-recovery-alerts
  namespace: disaster-recovery
  labels:
    component: dr-monitoring
spec:
  groups:
  - name: disaster-recovery
    rules:
    # DR Orchestrator Health
    - alert: DROrchestatorDown
      expr: up{job="dr-orchestrator"} == 0
      for: 2m
      labels:
        severity: critical
      annotations:
        summary: "DR Orchestrator is down"
        description: "DR Orchestrator has been down for more than 2 minutes"
    
    # Backup Failures
    - alert: BackupFailed
      expr: backup_last_success_timestamp < (time() - 3600)
      for: 0m
      labels:
        severity: critical
      annotations:
        summary: "Backup operation failed"
        description: "Last successful backup was more than 1 hour ago"
    
    # Cross-Cloud Replication Issues
    - alert: CrossCloudReplicationFailed
      expr: cross_cloud_replication_lag > 900  # 15 minutes
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "Cross-cloud replication lag high"
        description: "Cross-cloud replication lag is {{ $value }} seconds"
    
    # RTO/RPO Violation
    - alert: RTOViolation
      expr: dr_recovery_time > 3600  # 1 hour
      for: 0m
      labels:
        severity: critical
      annotations:
        summary: "RTO target violated"
        description: "Recovery time is {{ $value }} seconds, exceeding 1 hour RTO target"
    
    - alert: RPOViolation
      expr: dr_data_loss > 900  # 15 minutes
      for: 0m
      labels:
        severity: critical
      annotations:
        summary: "RPO target violated"
        description: "Data loss is {{ $value }} seconds, exceeding 15 minute RPO target"
    
    # Failover Trigger
    - alert: FailoverTriggered
      expr: dr_failover_status == 1
      for: 0m
      labels:
        severity: critical
      annotations:
        summary: "Disaster recovery failover triggered"
        description: "DR failover has been triggered to {{ $labels.target_cloud }}"
    
    # System Availability Below Target
    - alert: AvailabilityBelowTarget
      expr: avg_over_time(system_availability[1h]) < 0.9999  # 99.99%
      for: 5m
      labels:
        severity: critical
      annotations:
        summary: "System availability below 99.99% target"
        description: "System availability is {{ $value | humanizePercentage }} over the last hour"

---
# DR Dashboard ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: dr-dashboard-config
  namespace: disaster-recovery
  labels:
    component: dr-dashboard
data:
  dashboard.json: |
    {
      "dashboard": {
        "title": "BMAD Platform Disaster Recovery Dashboard",
        "tags": ["bmad", "disaster-recovery", "availability"],
        "panels": [
          {
            "title": "RTO/RPO Status",
            "type": "stat",
            "targets": [
              {
                "expr": "dr_rto_compliance",
                "legendFormat": "RTO Compliance"
              },
              {
                "expr": "dr_rpo_compliance", 
                "legendFormat": "RPO Compliance"
              }
            ]
          },
          {
            "title": "Multi-Cloud Status",
            "type": "stat",
            "targets": [
              {
                "expr": "cloud_status{cloud=\"aws\"}",
                "legendFormat": "AWS"
              },
              {
                "expr": "cloud_status{cloud=\"azure\"}",
                "legendFormat": "Azure"
              },
              {
                "expr": "cloud_status{cloud=\"gcp\"}",
                "legendFormat": "GCP"
              }
            ]
          },
          {
            "title": "Backup Status",
            "type": "graph",
            "targets": [
              {
                "expr": "backup_last_success_timestamp",
                "legendFormat": "Last Successful Backup"
              }
            ]
          },
          {
            "title": "System Availability",
            "type": "graph",
            "targets": [
              {
                "expr": "system_availability",
                "legendFormat": "Availability (Target: 99.99%)"
              }
            ],
            "yAxes": [
              {
                "min": 0.99,
                "max": 1,
                "unit": "percentunit"
              }
            ]
          }
        ]
      }
    }

---
# PersistentVolumeClaim for Backup Storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backup-storage-pvc
  namespace: disaster-recovery
  labels:
    component: backup-storage
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Ti
  storageClassName: fast-ssd

---
# Network Bridge Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: network-bridge-config
  namespace: disaster-recovery
  labels:
    component: network-failover
data:
  bridge.conf: |
    # Network Bridge Configuration
    primary_network:
      cidr: "10.0.0.0/16"
      gateway: "10.0.1.1"
      dns: ["10.0.1.10", "10.0.1.11"]
      
    secondary_network:
      cidr: "10.1.0.0/16" 
      gateway: "10.1.1.1"
      dns: ["10.1.1.10", "10.1.1.11"]
      
    tertiary_network:
      cidr: "10.2.0.0/16"
      gateway: "10.2.1.1"
      dns: ["10.2.1.10", "10.2.1.11"]
      
    failover:
      health_check_interval: 30
      failure_threshold: 3
      recovery_threshold: 2