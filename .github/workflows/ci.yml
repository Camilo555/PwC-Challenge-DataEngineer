name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHONUNBUFFERED: 1
  POETRY_NO_INTERACTION: 1
  POETRY_VENV_IN_PROJECT: 1
  POETRY_CACHE_DIR: /tmp/poetry_cache
  # Test environment variables
  ENVIRONMENT: test
  DATABASE_TYPE: sqlite
  DATABASE_URL: sqlite:///./test.db
  API_PORT: 8000
  ENABLE_EXTERNAL_ENRICHMENT: false
  ENABLE_VECTOR_SEARCH: false
  ENABLE_SUPABASE_RLS: false

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        poetry install --no-interaction --no-root --with dev
        rm -rf $POETRY_CACHE_DIR
        
    - name: Install project
      run: poetry install --no-interaction --with dev
      
    - name: Run linting with ruff
      run: poetry run ruff check src/ tests/
      
    - name: Run formatting check with ruff
      run: poetry run ruff format --check src/ tests/
      
    - name: Run type checking with mypy
      run: poetry run mypy src/ --ignore-missing-imports
      continue-on-error: true
      
    - name: Create test directories
      run: |
        mkdir -p data/raw data/bronze data/silver data/gold data/warehouse logs
        mkdir -p reports/data_quality reports/airflow_pipeline
        
    - name: Test core imports and configuration
      run: |
        export PYTHONPATH=src:$PYTHONPATH
        poetry run python -c "
        import sys
        sys.path.insert(0, 'src')
        from core.config import settings
        from api.main import app
        from data_access.db import create_all
        print('✓ Core imports successful')
        "
        
    - name: Test Airflow DAG imports
      run: |
        export PYTHONPATH=src:$PYTHONPATH
        poetry run python -c "
        import sys
        sys.path.insert(0, 'src')
        try:
            from airflow_dags.retail_etl_dag import dag as retail_dag
            from airflow_dags.advanced_retail_etl_dag import dag as advanced_dag
            from airflow_dags.airflow_config import AirflowConfig
            print('✓ Airflow DAGs import successfully')
        except ImportError as e:
            print(f'⚠ Airflow DAG import issue (expected in CI): {e}')
        "
        
    - name: Test Supabase client (without connection)
      run: |
        export PYTHONPATH=src:$PYTHONPATH
        poetry run python -c "
        import sys
        sys.path.insert(0, 'src')
        from data_access.supabase_client import SupabaseClient
        client = SupabaseClient()
        print('✓ Supabase client initialization successful')
        "
        
    - name: Run tests with coverage
      run: |
        export PYTHONPATH=src:$PYTHONPATH
        poetry run pytest tests/ -v \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term \
          --tb=short
          
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      if: matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      if: matrix.python-version == '3.10'
      with:
        name: coverage-report
        path: htmlcov/

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      
    - name: Install dependencies
      run: poetry install --no-interaction --with dev
      
    - name: Run safety check (if available)
      run: |
        if poetry run which safety >/dev/null 2>&1; then
          poetry run safety check --json || echo "Safety check completed with warnings"
        else
          echo "Safety not available, installing..."
          poetry run pip install safety
          poetry run safety check --json || echo "Safety check completed with warnings"
        fi
      continue-on-error: true
      
    - name: Run bandit security linter (if available)
      run: |
        if poetry run which bandit >/dev/null 2>&1; then
          poetry run bandit -r src/ -f json || echo "Bandit check completed with warnings"
        else
          echo "Bandit not available, installing..."
          poetry run pip install bandit
          poetry run bandit -r src/ -f json || echo "Bandit check completed with warnings"
        fi
      continue-on-error: true

  dependency-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      
    - name: Export requirements for vulnerability check
      run: |
        poetry export -f requirements.txt --output requirements.txt --without-hashes
        poetry export -f requirements.txt --output requirements-dev.txt --with dev --without-hashes
        
    - name: Check dependencies for vulnerabilities
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt
      continue-on-error: true
      
    - name: Check dev dependencies for vulnerabilities  
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements-dev.txt
      continue-on-error: true