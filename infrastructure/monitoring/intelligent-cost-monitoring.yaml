# Intelligent Cloud Cost Monitoring and Optimization System
# 40% cost reduction target with automated optimization and real-time alerting

---
# Namespace for Cost Monitoring
apiVersion: v1
kind: Namespace
metadata:
  name: cost-monitoring
  labels:
    app: bmad-cost-monitoring
    component: finops
    tier: production
    cost-center: engineering
spec: {}

---
# ConfigMap for Cost Optimization Rules and Policies
apiVersion: v1
kind: ConfigMap
metadata:
  name: cost-optimization-policies
  namespace: cost-monitoring
  labels:
    app: cost-optimization
    component: policies
data:
  optimization_policies.yaml: |
    cost_optimization:
      target_reduction_percentage: 40
      monitoring_frequency_minutes: 15
      optimization_frequency_hours: 6
      emergency_brake_threshold_percentage: 150
      
      # Multi-cloud cost thresholds
      budget_management:
        monthly_budget_usd: 50000
        daily_budget_usd: 1667
        hourly_budget_usd: 69
        
        alert_thresholds:
          warning: 75  # 75% of budget
          critical: 90 # 90% of budget
          emergency: 100 # 100% of budget
        
        forecast_accuracy_target: 95  # 95% accuracy in cost forecasting
        
      # Resource optimization rules
      rightsizing:
        enabled: true
        evaluation_period_days: 7
        
        cpu_thresholds:
          underutilized: 20    # Less than 20% average CPU
          overutilized: 80     # More than 80% average CPU
          evaluation_hours: 168 # 7 days
          
        memory_thresholds:
          underutilized: 30    # Less than 30% average memory
          overutilized: 85     # More than 85% average memory
          evaluation_hours: 168
          
        recommendations:
          minimum_savings_usd: 50    # Minimum $50/month savings
          confidence_threshold: 0.8   # 80% confidence in recommendation
          auto_apply_threshold: 0.9   # 90% confidence for auto-apply
          
      # Automated scheduling policies
      scheduling:
        enabled: true
        environments: ["dev", "staging", "test"]
        
        development:
          auto_shutdown_enabled: true
          shutdown_time: "19:00"      # 7 PM local time
          startup_time: "07:00"       # 7 AM local time
          weekend_shutdown: true
          holiday_shutdown: true
          timezone: "America/New_York"
          
        staging:
          auto_shutdown_enabled: true
          shutdown_time: "21:00"      # 9 PM local time
          startup_time: "06:00"       # 6 AM local time
          weekend_schedule: "reduced"  # Run minimal instances
          
        production:
          auto_shutdown_enabled: false
          intelligent_scaling_enabled: true
          spot_instance_optimization: true
          reserved_instance_optimization: true
          
      # Spot instance strategy
      spot_instances:
        enabled: true
        target_percentage: 60        # 60% of eligible workloads
        
        workload_eligibility:
          batch_processing: 90       # 90% spot for batch jobs
          development: 80            # 80% spot for dev environments
          testing: 85                # 85% spot for test environments
          staging: 60                # 60% spot for staging
          analytics: 70              # 70% spot for analytics workloads
          ml_training: 95            # 95% spot for ML training
          web_services: 30           # 30% spot for web services
          databases: 0               # 0% spot for databases
          
        interruption_handling:
          graceful_shutdown_seconds: 120
          auto_replacement_enabled: true
          diversification_strategy: "balanced"
          instance_type_diversity: 5
          availability_zone_diversity: 3
          
      # Reserved instance recommendations
      reserved_instances:
        enabled: true
        analysis_period_days: 30
        commitment_terms: [12, 36]   # 1 year and 3 year terms
        payment_options: ["partial_upfront", "all_upfront"]
        coverage_target_percentage: 70
        
        recommendation_criteria:
          minimum_utilization: 75    # 75% minimum utilization
          minimum_savings: 15        # 15% minimum savings
          workload_stability_days: 90 # 90 days stable workload
          
      # Storage optimization
      storage_optimization:
        enabled: true
        
        lifecycle_policies:
          logs:
            transition_to_ia_days: 30      # Infrequent Access after 30 days
            transition_to_glacier_days: 90  # Glacier after 90 days
            delete_after_days: 2555         # Delete after 7 years
            
          backups:
            transition_to_ia_days: 7
            transition_to_glacier_days: 30
            delete_after_days: 2555
            
          analytics_data:
            transition_to_ia_days: 90
            transition_to_glacier_days: 365
            
        compression:
          enabled: true
          algorithms: ["lz4", "snappy", "gzip"]
          compression_ratio_target: 0.3    # 70% compression
          
        deduplication:
          enabled: true
          deduplication_ratio_target: 0.2  # 80% deduplication
          
      # Network cost optimization
      network_optimization:
        enabled: true
        
        cdn_usage:
          enable_for_static_content: true
          cache_hit_ratio_target: 0.85     # 85% cache hit ratio
          
        data_transfer:
          minimize_cross_region: true
          prefer_regional_traffic: true
          compression_enabled: true
          
        load_balancer:
          right_size_enabled: true
          idle_timeout_optimization: true
          
      # Container optimization
      container_optimization:
        enabled: true
        
        image_optimization:
          multi_stage_builds: true
          minimal_base_images: true
          layer_optimization: true
          vulnerability_scanning: true
          
        resource_optimization:
          cpu_requests_optimization: true
          memory_requests_optimization: true
          ephemeral_storage_optimization: true
          
        pod_optimization:
          pod_density_optimization: true
          node_utilization_target: 0.8    # 80% node utilization
          
  monitoring_config.yaml: |
    monitoring:
      collection_interval_minutes: 5
      retention_days: 90
      high_resolution_hours: 24
      
      # Metrics collection
      metrics:
        cost_metrics:
          - total_cost_usd
          - cost_per_service
          - cost_per_environment
          - cost_per_region
          - cost_per_resource_type
          - cost_trend
          - budget_utilization
          - forecast_accuracy
          
        performance_metrics:
          - cpu_utilization
          - memory_utilization
          - storage_utilization
          - network_utilization
          - request_latency
          - error_rates
          - availability
          
        optimization_metrics:
          - potential_savings
          - optimization_opportunities
          - rightsizing_recommendations
          - spot_instance_usage
          - reserved_instance_coverage
          - waste_identified
          
      # Real-time alerting
      alerting:
        channels:
          slack:
            webhook_url: "${SLACK_WEBHOOK_URL}"
            channel: "#finops-alerts"
            
          email:
            recipients:
              - "finops@pwc-challenge.com"
              - "engineering-leads@pwc-challenge.com"
              
          pagerduty:
            integration_key: "${PAGERDUTY_INTEGRATION_KEY}"
            
        rules:
          budget_alerts:
            - name: "Budget 75% Warning"
              condition: "budget_utilization > 0.75"
              severity: "warning"
              frequency: "hourly"
              
            - name: "Budget 90% Critical"
              condition: "budget_utilization > 0.90"
              severity: "critical"
              frequency: "immediate"
              
            - name: "Budget 100% Emergency"
              condition: "budget_utilization > 1.0"
              severity: "emergency"
              frequency: "immediate"
              action: "emergency_brake"
              
          anomaly_alerts:
            - name: "Cost Anomaly Detected"
              condition: "cost_anomaly_score > 0.8"
              severity: "warning"
              frequency: "immediate"
              
            - name: "Unexpected Cost Spike"
              condition: "hourly_cost_increase > 0.5"
              severity: "critical"
              frequency: "immediate"
              
          optimization_alerts:
            - name: "High Savings Opportunity"
              condition: "potential_monthly_savings > 1000"
              severity: "info"
              frequency: "daily"
              
            - name: "Resource Waste Detected"
              condition: "waste_percentage > 0.3"
              severity: "warning"
              frequency: "daily"

---
# Deployment for Cost Analytics Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cost-analytics-service
  namespace: cost-monitoring
  labels:
    app: cost-analytics
    component: finops-service
    tier: production
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: cost-analytics
  template:
    metadata:
      labels:
        app: cost-analytics
        component: finops-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: cost-analytics-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: cost-analytics
        image: bmad/cost-analytics:v1.2.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: COST_REDUCTION_TARGET
          value: "40"
        - name: AWS_REGION
          value: "us-east-1"
        - name: AZURE_LOCATION
          value: "East US"
        - name: GCP_REGION
          value: "us-central1"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: cost-monitoring-secrets
              key: database-url
        - name: PROMETHEUS_URL
          value: "http://prometheus.monitoring.svc.cluster.local:9090"
        - name: GRAFANA_URL
          value: "http://grafana.monitoring.svc.cluster.local:3000"
        - name: SLACK_WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: cost-monitoring-secrets
              key: slack-webhook-url
        # Cloud provider credentials
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: aws-cost-explorer-credentials
              key: access-key-id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: aws-cost-explorer-credentials
              key: secret-access-key
        - name: AZURE_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: azure-cost-management-credentials
              key: client-id
        - name: AZURE_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: azure-cost-management-credentials
              key: client-secret
        - name: AZURE_TENANT_ID
          valueFrom:
            secretKeyRef:
              name: azure-cost-management-credentials
              key: tenant-id
        - name: GCP_SERVICE_ACCOUNT_KEY
          valueFrom:
            secretKeyRef:
              name: gcp-billing-credentials
              key: service-account-key
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: data
          mountPath: /app/data
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: config
        configMap:
          name: cost-optimization-policies
      - name: data
        persistentVolumeClaim:
          claimName: cost-analytics-data
      - name: logs
        emptyDir:
          sizeLimit: 1Gi

---
# PVC for Cost Analytics Data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cost-analytics-data
  namespace: cost-monitoring
  labels:
    app: cost-analytics
    component: data-storage
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: gp3-optimized
  resources:
    requests:
      storage: 100Gi

---
# Service for Cost Analytics
apiVersion: v1
kind: Service
metadata:
  name: cost-analytics-service
  namespace: cost-monitoring
  labels:
    app: cost-analytics
    component: finops-service
spec:
  selector:
    app: cost-analytics
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  type: ClusterIP

---
# Service Account for Cost Analytics
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cost-analytics-service-account
  namespace: cost-monitoring
  labels:
    app: cost-analytics
    component: rbac

---
# RBAC for Cost Analytics Service
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cost-analytics-role
  labels:
    app: cost-analytics
    component: rbac
rules:
# Read access to nodes for resource utilization
- apiGroups: [""]
  resources: ["nodes", "nodes/stats", "nodes/metrics"]
  verbs: ["get", "list", "watch"]
# Read access to pods for cost allocation
- apiGroups: [""]
  resources: ["pods", "pods/logs"]
  verbs: ["get", "list", "watch"]
# Read access to deployments and services
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets", "daemonsets", "statefulsets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["services", "endpoints", "persistentvolumes", "persistentvolumeclaims"]
  verbs: ["get", "list", "watch"]
# Read access to HPA and VPA for scaling insights
- apiGroups: ["autoscaling"]
  resources: ["horizontalpodautoscalers"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["autoscaling.k8s.io"]
  resources: ["verticalpodautoscalers"]
  verbs: ["get", "list", "watch"]
# Write access to ConfigMaps for optimization recommendations
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "create", "update", "patch"]
# Read access to metrics
- apiGroups: ["metrics.k8s.io"]
  resources: ["nodes", "pods"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cost-analytics-rolebinding
  labels:
    app: cost-analytics
    component: rbac
subjects:
- kind: ServiceAccount
  name: cost-analytics-service-account
  namespace: cost-monitoring
roleRef:
  kind: ClusterRole
  name: cost-analytics-role
  apiGroup: rbac.authorization.k8s.io

---
# CronJob for Periodic Cost Optimization
apiVersion: batch/v1
kind: CronJob
metadata:
  name: cost-optimizer-job
  namespace: cost-monitoring
  labels:
    app: cost-optimizer
    component: batch-optimization
spec:
  schedule: "0 */6 * * *"  # Every 6 hours
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  jobTemplate:
    metadata:
      labels:
        app: cost-optimizer
        component: batch-job
    spec:
      template:
        metadata:
          labels:
            app: cost-optimizer
            component: batch-job
        spec:
          serviceAccountName: cost-analytics-service-account
          restartPolicy: OnFailure
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            fsGroup: 1000
          containers:
          - name: cost-optimizer
            image: bmad/cost-optimizer:v1.2.0
            imagePullPolicy: IfNotPresent
            env:
            - name: ENVIRONMENT
              value: "production"
            - name: OPTIMIZATION_MODE
              value: "batch"
            - name: COST_REDUCTION_TARGET
              value: "40"
            - name: DRY_RUN
              value: "false"  # Set to true for testing
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: cost-monitoring-secrets
                  key: database-url
            # Cloud provider credentials (same as above)
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-cost-explorer-credentials
                  key: access-key-id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-cost-explorer-credentials
                  key: secret-access-key
            - name: AZURE_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: azure-cost-management-credentials
                  key: client-id
            - name: AZURE_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: azure-cost-management-credentials
                  key: client-secret
            - name: AZURE_TENANT_ID
              valueFrom:
                secretKeyRef:
                  name: azure-cost-management-credentials
                  key: tenant-id
            - name: GCP_SERVICE_ACCOUNT_KEY
              valueFrom:
                secretKeyRef:
                  name: gcp-billing-credentials
                  key: service-account-key
            resources:
              requests:
                cpu: 1000m
                memory: 2Gi
              limits:
                cpu: 4000m
                memory: 8Gi
            volumeMounts:
            - name: config
              mountPath: /app/config
              readOnly: true
            - name: optimization-results
              mountPath: /app/results
          volumes:
          - name: config
            configMap:
              name: cost-optimization-policies
          - name: optimization-results
            emptyDir:
              sizeLimit: 5Gi

---
# ServiceMonitor for Prometheus Integration
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: cost-analytics-monitor
  namespace: cost-monitoring
  labels:
    app: cost-analytics
    component: monitoring
spec:
  selector:
    matchLabels:
      app: cost-analytics
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
    honorLabels: true
    scrapeTimeout: 25s
    metricRelabelings:
    - sourceLabels: [__name__]
      regex: 'cost_(.+)'
      targetLabel: __name__
      replacement: 'bmad_cost_${1}'
    - sourceLabels: [cloud_provider]
      targetLabel: provider
    - sourceLabels: [environment]
      targetLabel: env
  namespaceSelector:
    matchNames:
    - cost-monitoring

---
# PrometheusRule for Cost Monitoring Alerts
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: cost-monitoring-alerts
  namespace: cost-monitoring
  labels:
    app: cost-monitoring
    component: alerting
spec:
  groups:
  - name: cost-budget-alerts
    interval: 5m
    rules:
    - alert: BudgetUtilizationHigh
      expr: bmad_cost_budget_utilization_percentage > 75
      for: 5m
      labels:
        severity: warning
        category: cost
      annotations:
        summary: "Budget utilization is above 75%"
        description: "Budget utilization is {{ $value }}%, exceeding 75% threshold"

    - alert: BudgetUtilizationCritical
      expr: bmad_cost_budget_utilization_percentage > 90
      for: 1m
      labels:
        severity: critical
        category: cost
      annotations:
        summary: "Budget utilization is above 90%"
        description: "Budget utilization is {{ $value }}%, exceeding 90% threshold"

    - alert: BudgetExceeded
      expr: bmad_cost_budget_utilization_percentage > 100
      for: 0m
      labels:
        severity: emergency
        category: cost
      annotations:
        summary: "Budget has been exceeded!"
        description: "Budget utilization is {{ $value }}%, exceeding 100% threshold"

  - name: cost-anomaly-alerts
    interval: 5m
    rules:
    - alert: CostAnomalyDetected
      expr: bmad_cost_anomaly_score > 0.8
      for: 10m
      labels:
        severity: warning
        category: cost
      annotations:
        summary: "Cost anomaly detected"
        description: "Cost anomaly score is {{ $value }}, indicating unusual spending pattern"

    - alert: UnexpectedCostSpike
      expr: increase(bmad_cost_hourly_total_usd[1h]) > 50
      for: 5m
      labels:
        severity: critical
        category: cost
      annotations:
        summary: "Unexpected cost spike detected"
        description: "Hourly cost increased by ${{ $value }} in the last hour"

  - name: optimization-alerts
    interval: 15m
    rules:
    - alert: HighSavingsOpportunity
      expr: bmad_cost_potential_monthly_savings_usd > 1000
      for: 1h
      labels:
        severity: info
        category: optimization
      annotations:
        summary: "High cost savings opportunity identified"
        description: "Potential monthly savings of ${{ $value }} identified"

    - alert: ResourceWasteHigh
      expr: bmad_cost_waste_percentage > 30
      for: 30m
      labels:
        severity: warning
        category: optimization
      annotations:
        summary: "High resource waste detected"
        description: "Resource waste is {{ $value }}%, exceeding 30% threshold"

    - alert: RightsizingOpportunity
      expr: bmad_cost_rightsizing_opportunities > 10
      for: 1h
      labels:
        severity: info
        category: optimization
      annotations:
        summary: "Multiple rightsizing opportunities available"
        description: "{{ $value }} rightsizing opportunities identified"

---
# HPA for Cost Analytics Service
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: cost-analytics-hpa
  namespace: cost-monitoring
  labels:
    app: cost-analytics
    component: autoscaling
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: cost-analytics-service
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: cost_analysis_requests_per_second
      target:
        type: AverageValue
        averageValue: "10"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30

---
# NetworkPolicy for Cost Monitoring Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: cost-monitoring-network-policy
  namespace: cost-monitoring
  labels:
    app: cost-monitoring
    component: security
spec:
  podSelector:
    matchLabels:
      app: cost-analytics
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow monitoring traffic from Prometheus
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
  # Allow internal service communication
  - from:
    - podSelector:
        matchLabels:
          app: cost-analytics
    ports:
    - protocol: TCP
      port: 8080
  egress:
  # Allow DNS
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow HTTPS for cloud provider APIs
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # Allow database connections
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    ports:
    - protocol: TCP
      port: 5432