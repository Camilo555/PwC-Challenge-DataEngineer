# PRODUCTION SECURE ENVIRONMENT CONFIGURATION
# ============================================
# NEVER COMMIT THIS FILE WITH REAL VALUES
# Use external secret management in production

# Environment Configuration
ENVIRONMENT=production
USE_SPARK=true

# Database Configuration (Use external secret manager)
DATABASE_TYPE=postgresql
DATABASE_URL=${DATABASE_URL}  # From secret manager
SUPABASE_URL=${SUPABASE_URL}  # From secret manager
SUPABASE_KEY=${SUPABASE_KEY}  # From secret manager

# Spark Configuration
SPARK_MASTER=spark://spark-master:7077
SPARK_APP_NAME=RetailETL-Production
SPARK_MEMORY=8g
SPARK_EXECUTOR_MEMORY=4g
SPARK_DRIVER_MEMORY=4g
SPARK_SQL_SHUFFLE_PARTITIONS=400

# Spark Security Configuration
SPARK_AUTH_SECRET=${SPARK_AUTH_SECRET}  # Generate: openssl rand -base64 32
SPARK_SSL_KEYSTORE=/opt/spark/conf/keystore.jks
SPARK_SSL_KEYSTORE_PASSWORD=${SPARK_SSL_KEYSTORE_PASSWORD}
SPARK_SSL_TRUSTSTORE=/opt/spark/conf/truststore.jks  
SPARK_SSL_TRUSTSTORE_PASSWORD=${SPARK_SSL_TRUSTSTORE_PASSWORD}

# Delta Lake Configuration
DELTA_LOG_LEVEL=WARN
BRONZE_PATH=/data/bronze
SILVER_PATH=/data/silver
GOLD_PATH=/data/gold

# Typesense Configuration (Use secret manager)
TYPESENSE_API_KEY=${TYPESENSE_API_KEY}  # From secret manager
TYPESENSE_HOST=typesense
TYPESENSE_PORT=8108
TYPESENSE_PROTOCOL=https

# API Configuration
API_HOST=0.0.0.0
API_PORT=8000
API_WORKERS=8
API_RELOAD=false
API_LOG_LEVEL=warn

# Security Configuration (CRITICAL - USE SECRET MANAGER)
SECRET_KEY=${SECRET_KEY}  # Generate: python -c "import secrets; print(secrets.token_urlsafe(32))"
BASIC_AUTH_USERNAME=${BASIC_AUTH_USERNAME}  # From secret manager
BASIC_AUTH_PASSWORD=${BASIC_AUTH_PASSWORD}  # From secret manager - STRONG PASSWORD REQUIRED
JWT_SECRET_KEY=${JWT_SECRET_KEY}  # Generate: python -c "import secrets; print(secrets.token_urlsafe(32))"

# HTTPS/TLS Configuration
HTTPS_ENABLED=true
SSL_CERT_PATH=/opt/certs/server.crt
SSL_KEY_PATH=/opt/certs/server.key
SSL_CA_CERT_PATH=/opt/certs/ca.crt

# Database Security
DB_SSL_ENABLED=true
DB_SSL_CERT_PATH=/opt/certs/db-client.crt
DB_SSL_KEY_PATH=/opt/certs/db-client.key
DB_SSL_CA_CERT_PATH=/opt/certs/db-ca.crt

# Vault Configuration (Recommended for production)
VAULT_ENABLED=true
VAULT_URL=https://vault.company.com:8200
VAULT_TOKEN=${VAULT_TOKEN}  # From initial auth
VAULT_MOUNT_POINT=retail-etl

# Logging
LOG_LEVEL=INFO
LOG_FORMAT=json
LOG_FILE_PATH=/var/log/retail-etl/app.log

# Data Sources (Production paths)
RAW_DATA_PATH=/data/raw
ONLINE_RETAIL_FILE=online_retail_II.xlsx

# External API Configuration
CURRENCY_API_KEY=${CURRENCY_API_KEY}  # From secret manager
ENABLE_EXTERNAL_ENRICHMENT=true
ENRICHMENT_BATCH_SIZE=100

# Feature Flags (Production settings)
ENABLE_VECTOR_SEARCH=true
ENABLE_CACHING=true
ENABLE_MONITORING=true
ENABLE_SECURITY_AUDIT=true
ENABLE_RATE_LIMITING=true

# Redis Configuration (Secure)
REDIS_URL=${REDIS_URL}  # From secret manager with AUTH
REDIS_PASSWORD=${REDIS_PASSWORD}  # From secret manager
REDIS_SSL_ENABLED=true

# Monitoring
PROMETHEUS_ENABLED=true
GRAFANA_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}  # From secret manager
ALERT_WEBHOOK_URL=${ALERT_WEBHOOK_URL}  # From secret manager

# Network Security
ALLOWED_IPS=${ALLOWED_IPS}  # Comma-separated list
BLOCKED_IPS=${BLOCKED_IPS}  # Comma-separated list

# ============================================
# SECURITY NOTES:
# 1. Generate all secrets with cryptographically secure methods
# 2. Use HashiCorp Vault, AWS Secrets Manager, or Azure Key Vault
# 3. Rotate secrets regularly (30-90 days)
# 4. Never log secret values
# 5. Use least privilege access principles
# 6. Monitor all secret access
# ============================================