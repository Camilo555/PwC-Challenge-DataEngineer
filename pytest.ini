[tool:pytest]
# Pytest Configuration for Enterprise Testing Framework
minversion = 6.0
testpaths = tests
python_files = test_*.py *_test.py tests.py
python_classes = Test* *Tests
python_functions = test_* *_test

# Test markers for comprehensive categorization
markers =
    # Test types
    unit: Unit tests - fast, isolated tests
    integration: Integration tests - test component interactions
    e2e: End-to-end tests - complete workflow validation
    api: API contract and security tests
    performance: Performance and load tests
    security: Security tests (SAST/DAST)
    infrastructure: Infrastructure and Terraform tests
    data_quality: Data quality and validation tests
    contract: Contract tests for microservices
    chaos: Chaos engineering and fault injection tests
    
    # Security test markers
    dlp: Data Loss Prevention tests
    compliance: Compliance framework tests
    access_control: Access control and authorization tests
    api_security: API security tests
    websocket_security: WebSocket security tests
    penetration: Penetration testing (use with caution)
    cryptography: Cryptographic security tests
    
    # Test execution characteristics
    slow: Slow-running tests (>30 seconds)
    external: Tests requiring external services
    messaging: Tests requiring message queues
    database: Tests requiring database connections
    redis: Tests requiring Redis
    elasticsearch: Tests requiring Elasticsearch
    
    # Risk levels
    critical: Critical functionality tests
    smoke: Smoke tests for basic functionality
    regression: Regression tests
    stress: Stress tests for system limits
    
    # Test environments
    local: Tests that can run locally
    ci: Tests suitable for CI environment
    staging: Tests for staging environment
    production: Production readiness tests
    
    # Data pipeline specific
    bronze: Bronze layer data tests
    silver: Silver layer data tests
    gold: Gold layer data tests
    etl: ETL pipeline tests
    streaming: Streaming data tests
    batch: Batch processing tests
    
    # BMAD Story markers
    story_1_1: Story 1.1 - Foundation Setup
    story_1_2: Story 1.2 - Core Infrastructure  
    story_2_1: Story 2.1 - Bronze Layer Implementation
    story_2_2: Story 2.2 - Data Ingestion Pipeline
    story_3_1: Story 3.1 - Silver Layer Transformation
    story_3_2: Story 3.2 - Data Quality Framework
    story_4_1: Story 4.1 - Gold Layer Analytics
    story_4_2: Story 4.2 - Business Intelligence

# Timeout configuration
timeout = 600
timeout_method = thread

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] [%(name)s] %(filename)s:%(lineno)d: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S
log_file = logs/tests.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] [%(name)s] %(filename)s:%(lineno)d: %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Warnings configuration
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::ImportWarning
    ignore::FutureWarning

# Consolidated pytest configuration
addopts = 
    --cov=src 
    --cov-report=xml:coverage.xml
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=lcov:coverage.lcov
    --cov-fail-under=90
    --cov-branch
    --cov-context=test
    -ra -q 
    --strict-markers 
    --strict-config 
    --tb=short
    --junitxml=reports/junit.xml
    --html=reports/report.html 
    --self-contained-html
    --json-report 
    --json-report-file=reports/report.json
    --alluredir=reports/allure-results
    -n auto
    --order-dependencies
    --durations=10
    --durations-min=1.0
    --cache-clear

# Test collection and performance
collect_ignore = build/ dist/ .venv/ venv/ node_modules/ .git/ terraform/ docker/ dbt/
console_output_style = progress
norecursedirs = .git .tox venv build dist *.egg
cache_dir = .pytest_cache
testmon = true
testmon-env = CI