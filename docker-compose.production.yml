version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-retail_dw}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - retail-network

  # Redis for caching and message broker
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - retail-network

  # API Service (Production)
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.production
      target: production-api
    environment:
      - ENVIRONMENT=production
      - DATABASE_TYPE=postgresql
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-retail_dw}
      - REDIS_URL=redis://redis:6379/0
      - TYPESENSE_HOST=typesense
      - TYPESENSE_API_KEY=${TYPESENSE_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - BASIC_AUTH_PASSWORD=${BASIC_AUTH_PASSWORD}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      typesense:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    networks:
      - retail-network

  # Spark Master
  spark-master:
    image: bitnami/spark:3.5.3
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=yes
      - SPARK_RPC_ENCRYPTION_ENABLED=yes
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=yes
      - SPARK_SSL_ENABLED=yes
      - SPARK_AUTH_SECRET=${SPARK_AUTH_SECRET}
      - SPARK_SSL_KEYSTORE=${SPARK_SSL_KEYSTORE}
      - SPARK_SSL_KEYSTORE_PASSWORD=${SPARK_SSL_KEYSTORE_PASSWORD}
      - SPARK_SSL_TRUSTSTORE=${SPARK_SSL_TRUSTSTORE}
      - SPARK_SSL_TRUSTSTORE_PASSWORD=${SPARK_SSL_TRUSTSTORE_PASSWORD}
      - SPARK_USER=spark
      - SPARK_MASTER_OPTS=-Dspark.deploy.recoveryMode=FILESYSTEM -Dspark.deploy.recoveryDirectory=/spark-recovery
    ports:
      - "8080:8080"  # Spark Master Web UI
      - "7077:7077"  # Spark Master port
    volumes:
      - ./data:/app/data
      - spark_recovery:/spark-recovery
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - retail-network

  # Spark Workers (scalable)
  spark-worker-1:
    image: bitnami/spark:3.5.3
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=4G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=yes
      - SPARK_RPC_ENCRYPTION_ENABLED=yes
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=yes
      - SPARK_SSL_ENABLED=yes
      - SPARK_AUTH_SECRET=${SPARK_AUTH_SECRET}
      - SPARK_SSL_KEYSTORE=${SPARK_SSL_KEYSTORE}
      - SPARK_SSL_KEYSTORE_PASSWORD=${SPARK_SSL_KEYSTORE_PASSWORD}
      - SPARK_SSL_TRUSTSTORE=${SPARK_SSL_TRUSTSTORE}
      - SPARK_SSL_TRUSTSTORE_PASSWORD=${SPARK_SSL_TRUSTSTORE_PASSWORD}
      - SPARK_USER=spark
    volumes:
      - ./data:/app/data
    depends_on:
      - spark-master
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 5G
          cpus: '2.0'
        reservations:
          memory: 4G
          cpus: '1.0'
    networks:
      - retail-network

  spark-worker-2:
    image: bitnami/spark:3.5.3
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=4G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=yes
      - SPARK_RPC_ENCRYPTION_ENABLED=yes
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=yes
      - SPARK_SSL_ENABLED=yes
      - SPARK_AUTH_SECRET=${SPARK_AUTH_SECRET}
      - SPARK_SSL_KEYSTORE=${SPARK_SSL_KEYSTORE}
      - SPARK_SSL_KEYSTORE_PASSWORD=${SPARK_SSL_KEYSTORE_PASSWORD}
      - SPARK_SSL_TRUSTSTORE=${SPARK_SSL_TRUSTSTORE}
      - SPARK_SSL_TRUSTSTORE_PASSWORD=${SPARK_SSL_TRUSTSTORE_PASSWORD}
      - SPARK_USER=spark
    volumes:
      - ./data:/app/data
    depends_on:
      - spark-master
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 5G
          cpus: '2.0'
        reservations:
          memory: 4G
          cpus: '1.0'
    networks:
      - retail-network

  # ETL Service with Spark
  etl-spark:
    build:
      context: .
      dockerfile: docker/Dockerfile.production
      target: production-etl
    environment:
      - ENVIRONMENT=production
      - PROCESSING_ENGINE=spark
      - SPARK_MASTER_URL=spark://spark-master:7077
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-retail_dw}
      - PYTHONPATH=/app/src
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
      - spark-master
      - spark-worker-1
    profiles: ["etl"]
    restart: "no"
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    networks:
      - retail-network

  # Dagster (Modern Orchestration)
  dagster:
    build:
      context: .
      dockerfile: docker/Dockerfile.production
      target: dagster
    environment:
      - ENVIRONMENT=production
      - DAGSTER_POSTGRES_DB=${POSTGRES_DB:-retail_dw}
      - DAGSTER_POSTGRES_USER=${POSTGRES_USER:-postgres}
      - DAGSTER_POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - DAGSTER_POSTGRES_HOST=postgres
      - DAGSTER_POSTGRES_PORT=5432
      - PYTHONPATH=/app/src
    ports:
      - "3000:3000"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - dagster_home:/app/dagster_home
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles: ["orchestration", "dagster"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/server_info"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - retail-network

  # Airflow (Traditional Orchestration)
  airflow-init:
    build:
      context: .
      dockerfile: docker/Dockerfile.production
      target: airflow
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-retail_dw}
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/1
      - AIRFLOW__CELERY__RESULT_BACKEND=redis://redis:6379/1
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW_SECRET_KEY}
      - PYTHONPATH=/app/src
    volumes:
      - ./src/airflow_dags:/app/airflow_home/dags
      - ./logs:/app/logs
      - airflow_home:/app/airflow_home
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles: ["orchestration", "airflow"]
    command: >
      bash -c "
        airflow db init &&
        airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin
      "
    networks:
      - retail-network

  airflow-webserver:
    build:
      context: .
      dockerfile: docker/Dockerfile.production
      target: airflow
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-retail_dw}
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/1
      - AIRFLOW__CELERY__RESULT_BACKEND=redis://redis:6379/1
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW_SECRET_KEY}
      - PYTHONPATH=/app/src
    ports:
      - "8081:8080"
    volumes:
      - ./src/airflow_dags:/app/airflow_home/dags
      - ./logs:/app/logs
      - airflow_home:/app/airflow_home
    depends_on:
      - airflow-init
    profiles: ["orchestration", "airflow"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - retail-network

  airflow-scheduler:
    build:
      context: .
      dockerfile: docker/Dockerfile.production
      target: airflow
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-retail_dw}
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/1
      - AIRFLOW__CELERY__RESULT_BACKEND=redis://redis:6379/1
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - PYTHONPATH=/app/src
    volumes:
      - ./src/airflow_dags:/app/airflow_home/dags
      - ./logs:/app/logs
      - airflow_home:/app/airflow_home
    depends_on:
      - airflow-init
    profiles: ["orchestration", "airflow"]
    command: airflow scheduler
    restart: unless-stopped
    networks:
      - retail-network

  # Typesense Vector Database
  typesense:
    image: typesense/typesense:0.25.1
    environment:
      TYPESENSE_DATA_DIR: /data
      TYPESENSE_API_KEY: ${TYPESENSE_API_KEY}
      TYPESENSE_ENABLE_CORS: true
    ports:
      - "8108:8108"
    volumes:
      - typesense_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8108/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    networks:
      - retail-network

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles: ["monitoring"]
    restart: unless-stopped
    networks:
      - retail-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    profiles: ["monitoring"]
    restart: unless-stopped
    networks:
      - retail-network

  # Log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    profiles: ["logging"]
    restart: unless-stopped
    networks:
      - retail-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    volumes:
      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/app/logs:ro
    depends_on:
      - elasticsearch
    profiles: ["logging"]
    restart: unless-stopped
    networks:
      - retail-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    profiles: ["logging"]
    restart: unless-stopped
    networks:
      - retail-network

  # Nginx Reverse Proxy
  nginx:
    build:
      context: .
      dockerfile: docker/Dockerfile.production
      target: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    profiles: ["production"]
    restart: unless-stopped
    networks:
      - retail-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  typesense_data:
    driver: local
  dagster_home:
    driver: local
  airflow_home:
    driver: local
  spark_recovery:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  # Network segmentation for security
  frontend-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
  backend-network:
    driver: bridge
    internal: true  # No external access
    ipam:
      config:
        - subnet: 172.21.0.0/24
  database-network:
    driver: bridge
    internal: true  # No external access
    ipam:
      config:
        - subnet: 172.22.0.0/24
  monitoring-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.23.0.0/24
    ipam:
      config:
        - subnet: 172.20.0.0/16