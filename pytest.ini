[pytest]
# Modern Enterprise Testing Framework Configuration - PwC Challenge DataEngineer
# Target: 95%+ test coverage with parallel execution and comprehensive test categorization
minversion = 7.0
testpaths = tests
python_files = test_*.py *_test.py tests.py
python_classes = Test* *Tests
python_functions = test_* *_test

# Comprehensive Test Markers for Enterprise Testing
markers =
    # Test Types - Core Categories
    unit: Unit tests - fast, isolated tests (target: <100ms each)
    integration: Integration tests - component interaction validation
    e2e: End-to-end tests - complete workflow validation
    api: API contract and security tests
    performance: Performance and load tests (target: <50ms p95)
    security: Security tests (SAST/DAST/Penetration)
    infrastructure: Infrastructure and Terraform tests
    data_quality: Data quality and validation tests
    contract: Contract tests for microservices
    chaos: Chaos engineering and fault injection tests
    coverage: Coverage enhancement tests
    mutation: Mutation testing validation
    property: Property-based testing with Hypothesis
    
    # Security Test Categories
    dlp: Data Loss Prevention tests
    compliance: Compliance framework tests (GDPR/SOX)
    access_control: Access control and authorization tests
    api_security: API security and authentication tests
    websocket_security: WebSocket security tests
    penetration: Penetration testing (use with caution)
    cryptography: Cryptographic security tests
    owasp: OWASP Top 10 security validation
    
    # Test Execution Characteristics
    slow: Slow-running tests (>30 seconds)
    fast: Fast tests (<1 second)
    external: Tests requiring external services
    messaging: Tests requiring message queues (Kafka/RabbitMQ)
    database: Tests requiring database connections
    redis: Tests requiring Redis
    elasticsearch: Tests requiring Elasticsearch
    spark: Tests requiring Apache Spark
    
    # Risk Levels & Test Priorities
    critical: Critical functionality tests
    smoke: Smoke tests for basic functionality
    regression: Regression tests for bug prevention
    stress: Stress tests for system limits
    load: Load testing scenarios
    
    # Test Environments
    local: Tests that can run locally
    ci: Tests suitable for CI environment
    staging: Tests for staging environment
    production: Production readiness tests
    docker: Tests requiring Docker containers
    
    # Data Pipeline Specific
    bronze: Bronze layer data tests
    silver: Silver layer data tests
    gold: Gold layer data tests
    etl: ETL pipeline tests
    streaming: Streaming data tests
    batch: Batch processing tests
    data_validation: Data validation and quality checks
    
    # BMAD Story Markers
    story_1_1: Story 1.1 - Real-time BI Dashboard
    story_1_2: Story 1.2 - ML Data Quality Framework
    story_2_1: Story 2.1 - Zero-Trust Security
    story_2_2: Story 2.2 - API Performance Optimization
    story_3_1: Story 3.1 - Self-Service Analytics
    story_4_1: Story 4.1 - Advanced Analytics Engine
    story_4_2: Story 4.2 - Enterprise Dashboard

# Parallel Execution with pytest-xdist (Commented out for debugging)
# dist = worksteal
# workers = auto
# maxprocesses = 8

# Timeout Configuration - Enterprise Grade
timeout = 600
timeout_method = thread

# Advanced Coverage Configuration - Target: 95%+
addopts = 
    --strict-markers
    --strict-config
    --cov=src
    --cov-report=xml:coverage.xml
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=lcov:coverage.lcov
    --cov-fail-under=95
    --cov-branch
    --cov-context=test
    --tb=short
    --junitxml=reports/junit.xml
    --html=reports/report.html
    --self-contained-html
    --json-report
    --json-report-file=reports/report.json
    --durations=10
    --durations-min=1.0
    --cache-clear
    -ra
    -q

# Logging Configuration - Production Grade
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] [%(name)s] %(filename)s:%(lineno)d: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S
log_file = logs/tests.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] [%(name)s] %(filename)s:%(lineno)d: %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Warnings Configuration
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::ImportWarning
    ignore::FutureWarning
    ignore::pytest.PytestUnraisableExceptionWarning

# Test Collection and Performance Optimization
console_output_style = progress
norecursedirs = .git .tox .venv venv build dist *.egg node_modules terraform docker dbt .pytest_cache __pycache__ .hypothesis
cache_dir = .pytest_cache

# Advanced Async Testing Configuration
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Property-Based Testing with Hypothesis (Commented out for debugging)
# hypothesis-show-statistics = true
# hypothesis-seed = 42
# hypothesis-deadline = 5000
# hypothesis-max-examples = 100

# Mutation Testing Integration (Commented out unsupported options)
# mutmut-fail-fast = false
# mutmut-runner = pytest
# mutmut-timeout-multiplier = 2.0

# Test Isolation and Fixtures (Commented out unsupported options)
# usefixtures = isolation_fixture
# fixture_scope_tracker = true

# Performance and Benchmark Settings
# benchmark-min-time = 0.000005

# Database Testing Configuration (Commented out unsupported options)
# database-isolation = true
# database-rollback = true
# database-schema-validation = true

# Security Testing Configuration (Commented out unsupported options)
# security-audit = true
# security-fail-on-critical = true
# security-ignore-info = true

# Test Data Management (Commented out unsupported options)
# test-data-cleanup = auto
# test-data-isolation = strict
# test-data-factories = enabled

# CI/CD Integration (Commented out unsupported options)
# ci-friendly-output = true
# ci-fail-fast = false
# ci-parallel-safety = strict

# Advanced Test Selection (Commented out unsupported options)
# collect-markers = true
# collect-only-changed = false
# run-failed-first = true
# run-slow-last = true

# Memory and Resource Management (Commented out unsupported options)
# memory-profiling = false
# resource-monitoring = true
# gc-disable-during-test = false

# Test Discovery Enhancement
doctest_optionflags = NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL
doctest_encoding = utf-8

# Plugin Configuration (Commented out for debugging)
# plugins =
#     pytest-html
#     pytest-json-report
#     pytest-cov
#     pytest-xdist
#     pytest-asyncio
#     pytest-benchmark
#     pytest-timeout
#     pytest-mock
#     pytest-clarity
#     pytest-sugar

# Test Reporting Enhancement (Commented out unsupported options)
# html_theme = classic
# html_self_contained = true
# html_css_files = ["custom.css"]
# html_js_files = ["custom.js"]

# Custom Configuration for Enterprise Testing
# Note: Custom options removed to fix coverage reporting
# enterprise_mode = true
# quality_gate_enabled = true
# test_traceability = true
# business_metrics = true