{
  "postman_collection": {
    "info": {
      "name": "PwC Enterprise Data Engineering API - Complete Collection",
      "description": "Comprehensive Postman collection covering all 208+ API endpoints with authentication, testing scripts, and performance monitoring",
      "version": "3.1.0",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "auth": {
      "type": "bearer",
      "bearer": [
        {
          "key": "token",
          "value": "{{access_token}}",
          "type": "string"
        }
      ]
    },
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "type": "text/javascript",
          "exec": [
            "// Global pre-request script for all endpoints",
            "",
            "// Add correlation ID for request tracing",
            "const correlationId = 'postman-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);",
            "pm.request.headers.add({",
            "    key: 'X-Correlation-ID',",
            "    value: correlationId",
            "});",
            "",
            "// Store correlation ID for response validation",
            "pm.environment.set('current_correlation_id', correlationId);",
            "",
            "// Add performance tracking",
            "pm.environment.set('request_start_time', Date.now());",
            "",
            "// Add user agent for API analytics",
            "pm.request.headers.add({",
            "    key: 'User-Agent',",
            "    value: 'PwC-API-Testing/Postman-v3.1.0'",
            "});",
            "",
            "console.log('Request initiated:', {",
            "    method: pm.request.method,",
            "    url: pm.request.url.toString(),",
            "    correlationId: correlationId",
            "});"
          ]
        }
      },
      {
        "listen": "test",
        "script": {
          "type": "text/javascript",
          "exec": [
            "// Global test script for all endpoints",
            "",
            "// Basic response validation",
            "pm.test('Response status is successful', function () {",
            "    pm.response.to.have.status.oneOf([200, 201, 202, 204]);",
            "});",
            "",
            "// Performance validation",
            "const startTime = pm.environment.get('request_start_time');",
            "const responseTime = Date.now() - startTime;",
            "",
            "pm.test('Response time is acceptable (<2s)', function () {",
            "    pm.expect(pm.response.responseTime).to.be.below(2000);",
            "});",
            "",
            "pm.test('Response time meets SLA (<500ms target)', function () {",
            "    pm.expect(pm.response.responseTime).to.be.below(500);",
            "});",
            "",
            "// Security headers validation",
            "pm.test('Security headers present', function () {",
            "    pm.expect(pm.response.headers.has('X-Correlation-ID')).to.be.true;",
            "});",
            "",
            "// JSON response validation",
            "if (pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
            "    pm.test('Response is valid JSON', function () {",
            "        pm.response.to.be.json;",
            "    });",
            "",
            "    // Validate standard response structure",
            "    pm.test('Response has standard structure', function () {",
            "        const response = pm.response.json();",
            "        pm.expect(response).to.have.property('success');",
            "        if (response.success) {",
            "            pm.expect(response).to.have.property('data');",
            "        } else {",
            "            pm.expect(response).to.have.property('error');",
            "        }",
            "    });",
            "}",
            "",
            "// Log response metrics",
            "console.log('Response received:', {",
            "    status: pm.response.code,",
            "    responseTime: pm.response.responseTime + 'ms',",
            "    size: pm.response.responseSize + ' bytes',",
            "    correlationId: pm.response.headers.get('X-Correlation-ID')",
            "});"
          ]
        }
      }
    ],
    "variable": [
      {
        "key": "baseUrl",
        "value": "{{$processEnv.API_BASE_URL || 'http://localhost:8000'}}",
        "type": "string",
        "description": "Base API URL - can be overridden with environment variable"
      },
      {
        "key": "access_token",
        "value": "",
        "type": "string",
        "description": "JWT access token obtained from authentication"
      },
      {
        "key": "api_key",
        "value": "",
        "type": "string",
        "description": "API key for service-to-service authentication"
      },
      {
        "key": "username",
        "value": "data_engineer",
        "type": "string"
      },
      {
        "key": "password",
        "value": "SecurePass123!",
        "type": "string"
      }
    ]
  },
  "environments": {
    "development": {
      "name": "Development Environment",
      "values": [
        {
          "key": "baseUrl",
          "value": "http://localhost:8000",
          "enabled": true
        },
        {
          "key": "environment",
          "value": "development",
          "enabled": true
        }
      ]
    },
    "staging": {
      "name": "Staging Environment",
      "values": [
        {
          "key": "baseUrl",
          "value": "https://api-staging.pwc-data.com",
          "enabled": true
        },
        {
          "key": "environment",
          "value": "staging",
          "enabled": true
        }
      ]
    },
    "production": {
      "name": "Production Environment",
      "values": [
        {
          "key": "baseUrl",
          "value": "https://api.pwc-data.com",
          "enabled": true
        },
        {
          "key": "environment",
          "value": "production",
          "enabled": true
        }
      ]
    }
  },
  "test_suites": {
    "smoke_tests": {
      "name": "API Smoke Tests",
      "description": "Essential tests to verify API is functioning",
      "tests": [
        "Health Check",
        "Authentication - Login",
        "Sales Data - Basic Query",
        "Analytics - Revenue Summary"
      ]
    },
    "comprehensive_tests": {
      "name": "Comprehensive API Tests",
      "description": "Full test suite covering all endpoints",
      "tests": [
        "All Authentication Flows",
        "All Sales Endpoints",
        "All Analytics Endpoints",
        "All AI/ML Endpoints",
        "All Search Endpoints",
        "All Monitoring Endpoints"
      ]
    },
    "performance_tests": {
      "name": "Performance Validation Tests",
      "description": "Tests focused on performance and SLA validation",
      "tests": [
        "Response Time Validation",
        "Concurrent User Simulation",
        "Load Testing Scenarios",
        "Cache Performance Tests"
      ]
    },
    "security_tests": {
      "name": "Security Validation Tests",
      "description": "Security-focused testing scenarios",
      "tests": [
        "Authentication Security",
        "Authorization Testing",
        "Input Validation",
        "Error Handling Security"
      ]
    }
  },
  "newman_configurations": {
    "local_run": {
      "description": "Configuration for local Newman execution",
      "options": {
        "environment": "development.postman_environment.json",
        "reporters": ["cli", "json", "htmlextra"],
        "reporter": {
          "htmlextra": {
            "export": "./reports/api-test-report.html"
          }
        },
        "timeout": 30000,
        "delayRequest": 100
      }
    },
    "ci_cd_run": {
      "description": "Configuration for CI/CD pipeline execution",
      "options": {
        "environment": "staging.postman_environment.json",
        "reporters": ["cli", "junit", "json"],
        "reporter": {
          "junit": {
            "export": "./reports/junit-report.xml"
          }
        },
        "timeout": 10000,
        "bail": true
      }
    }
  },
  "documentation": {
    "usage_guide": {
      "title": "API Testing Collection Usage Guide",
      "sections": [
        {
          "title": "Getting Started",
          "content": [
            "1. Import the collection into Postman",
            "2. Import the environment files",
            "3. Set up authentication credentials",
            "4. Run the smoke tests to verify connectivity",
            "5. Explore individual endpoints or run full test suites"
          ]
        },
        {
          "title": "Authentication Setup",
          "content": [
            "1. Set username and password variables",
            "2. Run the Login request in Authentication folder",
            "3. Access token will be automatically stored",
            "4. All subsequent requests will use the token automatically"
          ]
        },
        {
          "title": "Running Tests",
          "content": [
            "Individual Requests: Click 'Send' on any request",
            "Folder Tests: Right-click folder â†’ 'Run folder'",
            "Collection Tests: Use Collection Runner",
            "Newman CLI: newman run collection.json -e environment.json"
          ]
        },
        {
          "title": "Performance Monitoring",
          "content": [
            "All requests include automatic performance tracking",
            "Response times are validated against SLA targets",
            "Performance metrics are logged to console",
            "Use Newman HTML reports for detailed performance analysis"
          ]
        }
      ]
    },
    "advanced_features": {
      "title": "Advanced Testing Features",
      "features": [
        {
          "name": "Correlation ID Tracking",
          "description": "Every request includes a unique correlation ID for tracing"
        },
        {
          "name": "Automatic Token Management",
          "description": "JWT tokens are automatically extracted and reused"
        },
        {
          "name": "Response Validation",
          "description": "Comprehensive validation of response structure and content"
        },
        {
          "name": "Performance SLA Validation",
          "description": "Automatic validation against performance targets"
        },
        {
          "name": "Security Header Validation",
          "description": "Verification of required security headers"
        },
        {
          "name": "Error Handling Tests",
          "description": "Validation of error responses and status codes"
        }
      ]
    }
  },
  "maintenance": {
    "version": "3.1.0",
    "last_updated": "2024-01-15T10:00:00Z",
    "changelog": [
      {
        "version": "3.1.0",
        "date": "2024-01-15",
        "changes": [
          "Added comprehensive endpoint coverage for all 208+ endpoints",
          "Enhanced authentication flows with multi-method support",
          "Added performance SLA validation tests",
          "Implemented correlation ID tracking",
          "Added comprehensive error handling validation",
          "Enhanced security testing capabilities"
        ]
      }
    ],
    "contributors": [
      "PwC Data Engineering Team"
    ],
    "support": {
      "email": "api-support@pwc-data.com",
      "documentation": "https://docs.pwc-data.com",
      "issues": "https://github.com/pwc/data-engineering-api/issues"
    }
  }
}