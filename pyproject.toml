[tool.poetry]
name = "de-challenge-retail-etl"
version = "0.1.0"
description = "Data Engineering Challenge - Retail ETL Pipeline with Vector Search"
authors = ["camilo Bautista <camilobautista00@gmail.com>"]
readme = "README.md"
packages = [{include = "de_challenge", from = "src"}]

[tool.poetry.dependencies]
python = ">=3.10,<3.11"
pyspark = "3.5.3"
delta-spark = "^3.2.1"
fastapi = "^0.116.1"
uvicorn = {extras = ["standard"], version = "^0.35.0"}
pydantic = "^2.11.7"
pydantic-settings = "^2.10.1"
sqlmodel = "^0.0.24"
sqlalchemy = "^2.0.42"
alembic = "^1.16.4"
psycopg2-binary = "^2.9.10"
typesense = "^1.1.1"
python-multipart = "^0.0.20"
pypdf2 = "^3.0.1"
pandas = "^2.2.3"
numpy = "^1.26.4"
sentence-transformers = "^3.3.1"
python-dotenv = "^1.1.1"
httpx = "^0.28.1"
aiofiles = "^24.1.0"
pyyaml = "^6.0.2"
email-validator = "^2.2.0"
openpyxl = "^3.1.5"
node = "^1.2.2"
npm = "^0.1.1"
# Orchestration
dagster = "^1.8.13"
dagster-webserver = "^1.8.13"
dagster-pandas = "^0.24.13"
# External APIs
aiohttp = "^3.10.11"

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
pytest-asyncio = "^0.25.2"
pytest-cov = "^6.0.0"
ruff = "^0.12.7"
black = "^24.1.0"
mypy = "^1.14.1"
pre-commit = "^4.0.2"
ipython = "^8.32.0"
jupyter = "^1.1.1"
notebook = "^7.3.2"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py310"
line-length = 100

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]

[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_generics = false
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config --cov=src/de_challenge"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.coverage.run]
source = ["src/de_challenge"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]