name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHONUNBUFFERED: 1
  POETRY_NO_INTERACTION: 1
  POETRY_VENV_IN_PROJECT: 1
  POETRY_CACHE_DIR: /tmp/poetry_cache

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        poetry install --no-interaction --no-root
        rm -rf $POETRY_CACHE_DIR
        
    - name: Install project
      run: poetry install --no-interaction
      
    - name: Run linting with ruff
      run: poetry run ruff check src/ tests/
      
    - name: Run formatting check with ruff
      run: poetry run ruff format --check src/ tests/
      
    - name: Run type checking with mypy
      run: poetry run mypy src/ --ignore-missing-imports
      continue-on-error: true
      
    - name: Run tests with coverage
      run: |
        poetry run pytest tests/ -v \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term
          
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      if: matrix.python-version == '3.10'
      with:
        name: coverage-report
        path: htmlcov/

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      
    - name: Install dependencies
      run: poetry install --no-interaction
      
    - name: Run safety check
      run: poetry run safety check --json || true
      continue-on-error: true
      
    - name: Run bandit security linter
      run: poetry run bandit -r src/ -f json || true
      continue-on-error: true

  dependency-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for dependency vulnerabilities
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt
      continue-on-error: true