# BMAD Platform NGINX Ingress Controller with High Availability
# Enterprise-grade load balancing with health checks and SSL termination

---
# NGINX Ingress Controller Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: ingress-nginx
  labels:
    name: ingress-nginx
    component: load-balancer

---
# NGINX Ingress Controller ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-configuration
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    component: controller
data:
  # Performance and Security Configuration
  worker-processes: "auto"
  worker-connections: "65536"
  worker-rlimit-nofile: "65536"
  max-worker-open-files: "65536"
  
  # SSL/TLS Configuration
  ssl-protocols: "TLSv1.2 TLSv1.3"
  ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384"
  ssl-prefer-server-ciphers: "false"
  ssl-session-cache: "shared:SSL:10m"
  ssl-session-timeout: "10m"
  ssl-session-tickets: "false"
  ssl-buffer-size: "8k"
  ssl-dh-param: "ingress-nginx/dhparam"
  
  # Security Headers
  add-headers: "ingress-nginx/custom-headers"
  enable-real-ip: "true"
  forwarded-for-header: "X-Forwarded-For"
  compute-full-forwarded-for: "true"
  use-forwarded-headers: "true"
  
  # Performance Optimization
  upstream-keepalive-connections: "320"
  upstream-keepalive-requests: "10000"
  upstream-keepalive-timeout: "60"
  keep-alive: "75"
  client-header-buffer-size: "1k"
  client-header-timeout: "60"
  client-body-timeout: "60"
  large-client-header-buffers: "4 8k"
  client-max-body-size: "100m"
  
  # Compression
  enable-brotli: "true"
  brotli-level: "6"
  brotli-types: "text/xml image/svg+xml application/x-font-ttf image/vnd.microsoft.icon application/x-font-opentype application/json font/eot application/vnd.ms-fontobject application/javascript font/otf application/xml application/xhtml+xml text/javascript  application/x-javascript text/plain application/x-font-truetype application/xml+rss image/x-icon font/opentype text/css image/x-win-bitmap"
  
  # Rate Limiting
  rate-limit-rps: "1000"
  rate-limit-connections: "100"
  
  # Monitoring and Logging
  enable-modsecurity: "true"
  enable-owasp-modsecurity-crs: "true"
  log-format-escape-json: "true"
  log-format-upstream: '{"timestamp": "$time_iso8601", "remote_addr": "$remote_addr", "x_forwarded_for": "$http_x_forwarded_for", "request_id": "$req_id", "remote_user": "$remote_user", "bytes_sent": $bytes_sent, "request_time": $request_time, "status": $status, "vhost": "$host", "request_proto": "$server_protocol", "path": "$uri", "request_query": "$args", "request_length": $request_length, "duration": $request_time,"method": "$request_method", "http_referrer": "$http_referer", "http_user_agent": "$http_user_agent", "upstream_addr": "$upstream_addr", "upstream_response_time": "$upstream_response_time", "upstream_response_length": "$upstream_response_length", "upstream_status": "$upstream_status"}'

---
# Custom Security Headers ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: custom-headers
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    component: controller
data:
  # Security Headers for A+ SSL Labs Rating
  Strict-Transport-Security: "max-age=31536000; includeSubDomains; preload"
  X-Content-Type-Options: "nosniff"
  X-Frame-Options: "SAMEORIGIN"
  X-XSS-Protection: "1; mode=block"
  Referrer-Policy: "strict-origin-when-cross-origin"
  Feature-Policy: "geolocation 'self'; microphone 'none'; camera 'none'"
  Permissions-Policy: "geolocation=(self), microphone=(), camera=()"
  Content-Security-Policy: "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' https:; connect-src 'self' https: wss:; frame-ancestors 'self'"
  X-Robots-Tag: "noindex, nofollow, nosnippet, noarchive"

---
# DH Parameters Secret for Perfect Forward Secrecy
apiVersion: v1
kind: Secret
metadata:
  name: dhparam
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
type: Opaque
data:
  dhparam.pem: LS0tLS1CRUdJTiBESCBQQVJBTUVURVJTLS0tLS0KTUlJQkNBS0NBUUVBdkpxcWJqK01RNEx4WGxoejZGdGFLalFhM0Q5WnFhcG1nWUlnTm5qUzM3RTEvd0lEQVFBQgotLS0tLUVORCBESCBQQVJBTUVURVJTLS0tLS0K

---
# NGINX Ingress Controller Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress-serviceaccount
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
# ClusterRole for NGINX Ingress Controller
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: nginx-ingress-clusterrole
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
      - namespaces
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch

---
# ClusterRoleBinding for NGINX Ingress Controller
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: nginx-ingress-clusterrole-nisa-binding
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress-clusterrole
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: ingress-nginx

---
# Role for NGINX Ingress Controller
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: nginx-ingress-role
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      - "ingress-controller-leader"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get

---
# RoleBinding for NGINX Ingress Controller
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: nginx-ingress-role-nisa-binding
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress-role
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: ingress-nginx

---
# NGINX Ingress Controller Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-ingress-controller
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/component: controller
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: nginx-ingress-serviceaccount
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - ingress-nginx
              topologyKey: kubernetes.io/hostname
      containers:
        - name: nginx-ingress-controller
          image: registry.k8s.io/ingress-nginx/controller:v1.9.4
          args:
            - /nginx-ingress-controller
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
            - --publish-service=$(POD_NAMESPACE)/ingress-nginx
            - --annotations-prefix=nginx.ingress.kubernetes.io
            - --enable-ssl-passthrough
            - --default-ssl-certificate=$(POD_NAMESPACE)/bmad-wildcard-tls
            - --watch-ingress-without-class
            - --ingress-class=nginx
            - --controller-class=k8s.io/ingress-nginx
            - --election-id=ingress-controller-leader
            - --update-status=true
            - --http-port=80
            - --https-port=443
            - --healthz-port=10254
            - --metrics-port=10254
            - --profiler-port=10255
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            runAsUser: 101
            runAsGroup: 82
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: LD_PRELOAD
              value: /usr/local/lib/libmimalloc.so
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 1
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
            - name: metrics
              containerPort: 10254
              protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
            limits:
              cpu: 1000m
              memory: 512Mi
          volumeMounts:
          - name: webhook-cert
            mountPath: /usr/local/certificates/
            readOnly: true
      volumes:
      - name: webhook-cert
        secret:
          secretName: bmad-wildcard-tls

---
# NGINX Ingress Controller Service
apiVersion: v1
kind: Service
metadata:
  name: ingress-nginx
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
  annotations:
    # Cloud provider specific annotations for high availability
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/azure-load-balancer-resource-group: "bmad-rg"
    service.beta.kubernetes.io/gce-neg: '{"ingress": true}'
    external-dns.alpha.kubernetes.io/hostname: "bmad-platform.com,api.bmad-platform.com,mobile.bmad-platform.com"
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  ports:
    - name: http
      port: 80
      targetPort: 80
      protocol: TCP
    - name: https
      port: 443
      targetPort: 443
      protocol: TCP
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
# IngressClass for NGINX
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
spec:
  controller: k8s.io/ingress-nginx

---
# Main Application Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: bmad-main-ingress
  namespace: default
  labels:
    app: bmad-platform
    component: ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/upstream-keepalive-connections: "320"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    external-dns.alpha.kubernetes.io/hostname: "bmad-platform.com"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - bmad-platform.com
    - api.bmad-platform.com
    - mobile.bmad-platform.com
    - analytics.bmad-platform.com
    secretName: bmad-wildcard-tls
  rules:
  - host: bmad-platform.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: bmad-frontend
            port:
              number: 80
  - host: api.bmad-platform.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: bmad-api
            port:
              number: 8000
  - host: mobile.bmad-platform.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: bmad-mobile
            port:
              number: 8080
  - host: analytics.bmad-platform.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: bmad-analytics
            port:
              number: 8000

---
# Health Check Service for Load Balancer
apiVersion: v1
kind: Service
metadata:
  name: bmad-health-check
  namespace: default
  labels:
    app: bmad-health-check
    component: health-check
spec:
  selector:
    app: bmad-health-check
  ports:
  - name: http
    port: 80
    targetPort: 8080
  type: ClusterIP

---
# Health Check Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bmad-health-check
  namespace: default
  labels:
    app: bmad-health-check
    component: health-check
spec:
  replicas: 2
  selector:
    matchLabels:
      app: bmad-health-check
  template:
    metadata:
      labels:
        app: bmad-health-check
    spec:
      containers:
      - name: health-check
        image: nginx:alpine
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: 32Mi
            cpu: 10m
          limits:
            memory: 64Mi
            cpu: 50m
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
        volumeMounts:
        - name: health-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
      volumes:
      - name: health-config
        configMap:
          name: health-check-config

---
# Health Check ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: health-check-config
  namespace: default
  labels:
    app: bmad-health-check
data:
  nginx.conf: |
    server {
        listen 8080;
        server_name localhost;
        
        location /health {
            access_log off;
            return 200 '{"status": "healthy", "timestamp": "$time_iso8601", "version": "v1.0.0"}';
            add_header Content-Type application/json;
        }
        
        location /ready {
            access_log off;
            return 200 '{"status": "ready", "timestamp": "$time_iso8601"}';
            add_header Content-Type application/json;
        }
        
        location /metrics {
            access_log off;
            return 200 '# HELP bmad_health_status Health status of BMAD platform\n# TYPE bmad_health_status gauge\nbmad_health_status{service="health-check"} 1\n';
            add_header Content-Type text/plain;
        }
    }

---
# ServiceMonitor for NGINX Ingress Metrics
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: nginx-ingress-metrics
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---
# Service for NGINX Metrics
apiVersion: v1
kind: Service
metadata:
  name: nginx-ingress-metrics
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
spec:
  selector:
    app.kubernetes.io/name: ingress-nginx
  ports:
  - name: metrics
    port: 10254
    targetPort: 10254
  type: ClusterIP

---
# Load Balancer Monitoring Alerts
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: nginx-ingress-alerts
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
spec:
  groups:
  - name: nginx-ingress
    rules:
    - alert: NGINXIngressDown
      expr: up{job="nginx-ingress-metrics"} == 0
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "NGINX Ingress controller is down"
        description: "NGINX Ingress controller has been down for more than 1 minute"
    
    - alert: NGINXIngressHighLatency
      expr: histogram_quantile(0.95, rate(nginx_ingress_controller_request_duration_seconds_bucket[5m])) > 1
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "NGINX Ingress high latency"
        description: "95th percentile latency is above 1 second for more than 5 minutes"
    
    - alert: NGINXIngressHighErrorRate
      expr: rate(nginx_ingress_controller_requests{status=~"5.*"}[5m]) / rate(nginx_ingress_controller_requests[5m]) > 0.05
      for: 5m
      labels:
        severity: critical
      annotations:
        summary: "NGINX Ingress high error rate"
        description: "Error rate is above 5% for more than 5 minutes"
    
    - alert: NGINXIngressCertificateExpiry
      expr: (nginx_ingress_controller_ssl_expire_time_seconds - time()) / 86400 < 30
      for: 1h
      labels:
        severity: warning
      annotations:
        summary: "NGINX Ingress certificate expiring soon"
        description: "SSL certificate for {{ $labels.host }} will expire in less than 30 days"

---
# HPA for NGINX Ingress Controller
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: nginx-ingress-hpa
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nginx-ingress-controller
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: nginx_ingress_controller_nginx_process_connections
      target:
        type: AverageValue
        averageValue: "10000"
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60