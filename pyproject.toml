[tool.poetry]
name = "retail-etl-pipeline"
version = "0.1.0"
description = "Production-Ready Retail ETL Pipeline with Medallion Architecture"
authors = ["camilo Bautista <camilobautista00@gmail.com>"]
readme = "README.md"
packages = [
    {include = "api", from = "src"},
    {include = "core", from = "src"},
    {include = "data_access", from = "src"},
    {include = "domain", from = "src"},
    {include = "etl", from = "src"},
    {include = "external_apis", from = "src"},
    {include = "orchestration", from = "src"},
    {include = "vector_search", from = "src"},
    {include = "airflow_dags", from = "src"}
]

[tool.poetry.dependencies]
python = ">=3.10,<3.11"
pyspark = "3.5.6"
delta-spark = "^3.2.1"
fastapi = "^0.116.1"
uvicorn = {extras = ["standard"], version = "^0.35.0"}
pydantic = "^2.9.0"
pydantic-settings = "^2.10.1"
sqlmodel = "^0.0.24"
sqlalchemy = "^2.0.43"
alembic = "^1.16.4"
psycopg2-binary = "^2.9.10"
typesense = "^1.1.1"
elasticsearch = "^9.1.0"
python-multipart = "^0.0.20"
pypdf2 = "^3.0.1"
pandas = "^2.3.2"
polars = "^1.18.0"
numpy = "^2.2.6"
# Security dependencies
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
sentence-transformers = "^5.1.0"
python-dotenv = "^1.1.1"
httpx = "^0.28.1"
aiofiles = "^24.1.0"
pyyaml = "^6.0.2"
email-validator = ">=2.0.0"
openpyxl = "^3.1.5"
node = "^1.2.2"
npm = "^0.1.1"
# Orchestration
dagster = "^1.8.13"
dagster-webserver = "^1.8.13"
# Alternative: Apache Airflow (install separately due to dependency conflicts)
# apache-airflow = {version = "^2.10.4", optional = true}
# dbt
dbt-postgres = "^1.7.4"
dbt-spark = {extras = ["PyHive"], version = "^1.7.4"}
# External APIs
aiohttp = "^3.10.11"
pyarrow = "^21.0.0"
# GraphQL
strawberry-graphql = {extras = ["fastapi"], version = "^0.282.0"}
# Async processing - replaced with RabbitMQ/Kafka
# celery = {extras = ["redis"], version = "^5.4.0"}  # Replaced with RabbitMQ
# redis = "^5.2.1"  # Removed - replaced with RabbitMQ and Kafka
# RabbitMQ for task queuing and distributed state management
pika = "^1.3.2"
aio-pika = "^9.4.3"
# Kafka for real-time event streaming
kafka-python = "^2.0.2"
# OpenTelemetry/Distributed Tracing
opentelemetry-api = "^1.27.0"
opentelemetry-sdk = "^1.27.0"
# opentelemetry-exporter-jaeger-thrift = "^1.27.0"  # Temporarily disabled due to dependency conflicts
opentelemetry-exporter-otlp = "^1.27.0"
opentelemetry-instrumentation-fastapi = "^0.48b0"
opentelemetry-instrumentation-sqlalchemy = "^0.48b0"
opentelemetry-instrumentation-requests = "^0.48b0"
opentelemetry-instrumentation-httpx = "^0.48b0"
# opentelemetry-instrumentation-redis = "^0.48b0"  # Removed with Redis
opentelemetry-instrumentation-psycopg2 = "^0.48b0"
opentelemetry-instrumentation = "^0.48b0"
psutil = "^7.0.0"
# DataDog APM and monitoring
ddtrace = "^2.18.1"
datadog = "^0.49.1"

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
pytest-asyncio = "^1.1.0"
pytest-cov = "^6.0.0"
pytest-benchmark = "^5.1.0"
pytest-xdist = "^3.5.0"
pytest-mock = "^3.12.0"
pytest-html = "^4.1.1"
pytest-json-report = "^1.5.0"
pytest-timeout = "^2.3.1"
pytest-random-order = "^1.1.0"
pytest-clarity = "^1.0.1"
pytest-sugar = "^1.0.0"
pytest-httpx = "^0.30.0"
pytest-postgresql = "^6.1.0"
testcontainers = "^4.8.2"
locust = "^2.31.8"
mutmut = "^2.4.3"
bandit = "^1.7.9"
safety = "^3.2.10"
hypothesis = "^6.115.6"
great-expectations = "^1.2.4"
faker = "^33.1.0"
responses = "^0.25.3"
websocket-client = "^1.8.0"
pytest-websocket = "^0.1.0"
ruff = "^0.12.10"
black = "^25.1.0"
mypy = "^1.14.1"
pre-commit = "^4.0.2"
ipython = "^8.32.0"
jupyter = "^1.1.1"
notebook = "^7.3.2"
memory-profiler = "^0.61.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py310"
line-length = 100

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]

[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_generics = false
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_equality = true
mypy_path = "src"
namespace_packages = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "-q", 
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-report=term-missing:skip-covered",
    "--cov-fail-under=95",
    "--html=reports/pytest-report.html",
    "--json-report",
    "--json-report-file=reports/pytest-report.json",
    "--durations=10",
    "--tb=short"
]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
timeout = 300
markers = [
    "unit: Unit tests with >95% coverage target",
    "integration: Integration tests with external dependencies", 
    "e2e: End-to-end tests with full system validation",
    "performance: Performance and load testing",
    "security: Security and penetration testing", 
    "smoke: Critical path smoke tests",
    "regression: Regression test suite",
    "story_1_1: Real-Time BI Dashboard tests",
    "story_1_2: ML Data Quality Framework tests", 
    "story_2_1: Zero-Trust Security tests",
    "story_2_2: API Performance tests",
    "story_3_1: Self-Service Analytics tests",
    "slow: Tests that take >5 seconds to execute",
    "fast: Tests that execute in <1 second",
    "database: Tests requiring database connections",
    "api: Tests for API endpoints",
    "websocket: Tests for WebSocket functionality",
    "ml: Machine learning model tests",
    "data_quality: Data validation and quality tests"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]